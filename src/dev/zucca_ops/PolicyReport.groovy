/*
 * Copyright 2025 GuidoZuccarelli
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dev.zucca_ops

/**
 * A data class that represents a Kyverno Policy Report.
 * It provides a structured way to handle the report data, including methods
 * for merging multiple reports and preparing the data for final YAML output.
 */
class PolicyReport implements Serializable {

	String apiVersion
	String kind
	Map metadata
	Map summary
	List<Map> results

	/**
	 * Default constructor to create a new, empty report.
	 * This is used as the starting point for the merge process.
	 */
	PolicyReport() {
		this.apiVersion = 'wgpolicyk8s.io/v1alpha2'
		this.kind = 'ClusterPolicyReport'
		this.metadata = [name: "final-merged-report-${System.currentTimeMillis()}"]
		this.summary = [pass: 0, fail: 0, warn: 0, error: 0, skip: 0]
		this.results = []
	}

	/**
	 * Constructor to create a PolicyReport object from a map that has been
	 * parsed from a YAML file. It handles cases where 'summary' or 'results'
	 * keys might be missing from the parsed data.
	 * @param parsedYaml The map generated by a YAML parser.
	 */
	PolicyReport(Map parsedYaml) {
		this.apiVersion = parsedYaml.apiVersion
		this.kind = parsedYaml.kind
		this.metadata = parsedYaml.metadata as Map
		this.summary = parsedYaml.summary ?: [:] as Map
		this.results = parsedYaml.results ?: [] as List<Map>
	}

	/**
	 * This method merges another PolicyReport object into this one. It aggregates the
	 * summary counts and concatenates the individual results lists.
	 * @param otherReport The report to merge from.
	 */
	void merge(PolicyReport otherReport) {
		// Handle summary aggregation, safely handling nulls.
		if (otherReport.summary) {
			this.summary.pass += otherReport.summary.pass ?: 0
			this.summary.fail += otherReport.summary.fail ?: 0
			this.summary.warn += otherReport.summary.warn ?: 0
			this.summary.error += otherReport.summary.error ?: 0
			this.summary.skip += otherReport.summary.skip ?: 0
		}

		// Handle results aggregation, safely handling nulls.
		if (otherReport.results) {
			this.results.addAll(otherReport.results)
		}
	}

	/**
	 * Converts the object into a Map suitable for the 'writeYaml' step.
	 * The order of keys is arranged to match the native Kyverno report format,
	 * with the 'summary' block appearing at the end.
	 */
	Map toMap() {
		return [
			apiVersion: this.apiVersion,
			kind: this.kind,
			metadata: this.metadata,
			results: this.results,
			summary: this.summary
		]
	}
}